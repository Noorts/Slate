$header-height: 60px;
$offset: 150px;
$hover-opacity: 0.7;

.header-main-container {
    display: none;
}

.header-logo-container {
    height: 100%;

    .header-logo-helper {
        height: 100%;

        display: inline-block;

        vertical-align: middle;
    }

    .header-logo {
        width: 24px;
        padding: 0px 10px;

        vertical-align: middle;

        &:hover {
            opacity: $hover-opacity;
        }
    }
}

.header-sidebar {
    width: 75vw;
    max-width: 300px;
    height: calc(100vh - 60px); // Hardcoded header-height.

    position: fixed;
    bottom: 0;
    right: 0;
    z-index: 5;

    visibility: hidden;
    background: var(--sidebar-background-color);
    box-shadow: rgba(60, 64, 67, 0.3) -1px 0px 2px 0px, rgba(60, 64, 67, 0.15) -1px 0px 3px 1px;
    clip-path: inset(0px 0px 0px -15px);

    display: flex;
    justify-content: center;
    align-items: center;

    transform: translateX(100vw);
    transition: all 0.3s cubic-bezier(0.645,0.045,0.355,1);

    &.header-sidebar-visible {
        visibility: visible;
        transform: translateX(0vw);
    }
}

.header-sidebar-item-container {
    width: 100%;

    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-direction: column;
}

.header-sidebar-item {
    margin-bottom: 32px;

    text-decoration: none;
    color: var(--sidebar-text-color);
}

.overlay {
    width: 100%;

    position: fixed;
    top: 0;
    bottom: 0;
    left: 0;
    z-index: 4;

    display: none;

    &.overlay-visible {
        display: unset !important;
    }
}

.site-title-container {
    height: 100%;

    margin-left: 20px;

    display: flex;
    align-items: center;
}

.site-title {
    margin-top: 3px;

    text-decoration: none;

    font-size: 1.375em;
    font-weight: 600;
    font-family: Helvetica;
    color: var(--header-text-color);

    &:hover {
        opacity: $hover-opacity;
    }
}

.header-offset-container.title {
    display: none;
}

@media only screen and (min-width: 1120px) {
    button.hamburger {
        display: none;
    }

    .header-logo {
        filter: invert(100%);
    }

    .header-sidebar {
        transform: translateX(100vw) !important;
        visibility: hidden !important;
    }

    .site-title-container {
        display: none;
    }

    .header-main-container {
        width: 100%;
        height: $header-height;

        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .header-item {
        position: relative;
        text-decoration: none;

        color: var(--header-text-color);

        &.active:before {
            content: "";
            position: absolute;
            width: 6px;
            height: 6px;
            top: 24px;
            left: calc(50% - 3px);

            border-radius: 100%;
            background: var(--header-text-color);
        }

        &:hover {
            opacity: $hover-opacity;

            &:before {
                z-index: 1;
            }
        }
    }

    .header-offset-container {
        height: $header-height;

        position: absolute;

        display: flex;
        align-items: center;

        &.logos {
            justify-content: space-evenly;
            right: -$offset;
        }

        &.title {
            display: flex;
            left: -$offset;
        }
    }

    .header-menu-button {
        display: none;
    }
}

// Credit for the CSS Hamburger goes to: Jonathan Suh, https://github.com/jonsuh/hamburgers/

// Settings
// ==================================================
$hamburger-padding-x           : 22px !default;
$hamburger-padding-y           : 20px !default;
$hamburger-layer-width         : 32px !default;
$hamburger-layer-height        : 3px !default;
$hamburger-layer-spacing       : 5px !default;
$hamburger-layer-color         : #F5F5F5 !default;
$hamburger-layer-border-radius : 4px !default;
$hamburger-hover-opacity       : 0.7 !default;
$hamburger-active-layer-color  : $hamburger-layer-color !default;
$hamburger-active-hover-opacity: $hamburger-hover-opacity !default;

// To use CSS filters as the hover effect instead of opacity,
// set $hamburger-hover-use-filter as true and
// change the value of $hamburger-hover-filter accordingly.
$hamburger-hover-use-filter   : false !default;
$hamburger-hover-filter       : opacity(50%) !default;
$hamburger-active-hover-filter: $hamburger-hover-filter !default;

// Hamburger
// ==================================================
.hamburger {
    // Two small adjustments made by myself.
    position: relative;
    z-index: 10;

    padding: $hamburger-padding-y $hamburger-padding-x;
    display: inline-block;
    cursor: pointer;

    transition-property: opacity, filter;
    transition-duration: 0.15s;
    transition-timing-function: linear;

    // Normalize (<button>)
    font: inherit;
    color: inherit;
    text-transform: none;
    background-color: transparent;
    border: 0;
    margin: 0;
    overflow: visible;

    &:hover {
        @if $hamburger-hover-use-filter == true {
            filter: $hamburger-hover-filter;
        }
        @else {
            opacity: $hamburger-hover-opacity;
        }
    }

    &.is-active {
        &:hover {
        @if $hamburger-hover-use-filter == true {
            filter: $hamburger-active-hover-filter;
        }
        @else {
            opacity: $hamburger-active-hover-opacity;
        }
        }

        .hamburger-inner,
        .hamburger-inner::before,
        .hamburger-inner::after {
            background-color: $hamburger-active-layer-color;
        }
    }
}

.hamburger-box {
    width: $hamburger-layer-width;
    height: $hamburger-layer-height * 3 + $hamburger-layer-spacing * 2;
    display: inline-block;
    position: relative;
}

.hamburger-inner {
    display: block;
    top: 50%;
    margin-top: $hamburger-layer-height / -2;

    &,
    &::before,
    &::after {
        width: $hamburger-layer-width;
        height: $hamburger-layer-height;
        background-color: $hamburger-layer-color;
        border-radius: $hamburger-layer-border-radius;
        position: absolute;
        transition-property: transform;
        transition-duration: 0.15s;
        transition-timing-function: ease;
    }

    &::before,
    &::after {
        content: "";
        display: block;
    }

    &::before {
        top: ($hamburger-layer-spacing + $hamburger-layer-height) * -1;
    }

    &::after {
        bottom: ($hamburger-layer-spacing + $hamburger-layer-height) * -1;
    }
}

.hamburger--spin {
    .hamburger-inner {
        transition-duration: 0.22s;
        transition-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);

        &::before {
            transition: top 0.1s 0.25s ease-in, opacity 0.1s ease-in;
        }

        &::after {
            transition: bottom 0.1s 0.25s ease-in, transform 0.22s cubic-bezier(0.55, 0.055, 0.675, 0.19);
        }
    }

    &.is-active {
        .hamburger-inner {
            transform: rotate(225deg);
            transition-delay: 0.12s;
            transition-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);

            &::before {
            top: 0;
            opacity: 0;
            transition: top 0.1s ease-out, opacity 0.1s 0.12s ease-out;
            }

            &::after {
            bottom: 0;
            transform: rotate(-90deg);
            transition: bottom 0.1s ease-out, transform 0.22s 0.12s cubic-bezier(0.215, 0.61, 0.355, 1);
            }
        }
    }
}